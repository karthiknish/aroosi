// storage.rules
rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    function isImage() {
      return request.resource != null &&
             request.resource.contentType.matches('image/(jpeg|jpg|png|webp|gif|heic)');
    }
    function under5MB() {
      return request.resource.size < 5 * 1024 * 1024;
    }

    // Publicly readable profile images; writes restricted to owner (â‰¤5MB, safe types)
    match /users/{userId}/profile-images/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null
                   && request.auth.uid == userId
                   && isImage()
                   && under5MB();
    }

    // Disable legacy direct client voice uploads
    match /voice/{userId}/{conversationId}/{allPaths=**} {
      allow read, write: if false;
    }

    // Server-managed voice messages (read requires auth; writes via Admin SDK)
    match /voiceMessages/{conversationId}/{allPaths=**} {
      allow read: if request.auth != null;
      allow write: if false;
    }

    // Blog images: public read; authenticated write with image constraints
    match /blog-images/{allPaths=**} {
      allow read: if true;
      allow write: if request.auth != null
                   && isImage()
                   && under5MB();
    }

    // Message attachments managed by server; block client access
    match /messages/{conversationId}/{allPaths=**} {
      allow read, write: if false;
    }

    // Default deny
    match /{path=**} {
      allow read, write: if false;
    }
  }
}
